// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package canceler

import (
	"sync"
)

var (
	lockCancelerMockCancel sync.RWMutex
)

// CancelerMock is a mock implementation of Canceler.
//
//     func TestSomethingThatUsesCanceler(t *testing.T) {
//
//         // make and configure a mocked Canceler
//         mockedCanceler := &CancelerMock{
//             CancelFunc: func() error {
// 	               panic("TODO: mock out the Cancel method")
//             },
//         }
//
//         // TODO: use mockedCanceler in code that requires Canceler
//         //       and then make assertions.
//
//     }
type CancelerMock struct {
	// CancelFunc mocks the Cancel method.
	CancelFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Cancel holds details about calls to the Cancel method.
		Cancel []struct {
		}
	}
}

// Cancel calls CancelFunc.
func (mock *CancelerMock) Cancel() error {
	if mock.CancelFunc == nil {
		panic("moq: CancelerMock.CancelFunc is nil but Canceler.Cancel was just called")
	}
	callInfo := struct {
	}{}
	lockCancelerMockCancel.Lock()
	mock.calls.Cancel = append(mock.calls.Cancel, callInfo)
	lockCancelerMockCancel.Unlock()
	return mock.CancelFunc()
}

// CancelCalls gets all the calls that were made to Cancel.
// Check the length with:
//     len(mockedCanceler.CancelCalls())
func (mock *CancelerMock) CancelCalls() []struct {
} {
	var calls []struct {
	}
	lockCancelerMockCancel.RLock()
	calls = mock.calls.Cancel
	lockCancelerMockCancel.RUnlock()
	return calls
}
